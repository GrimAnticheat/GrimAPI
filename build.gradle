plugins {
    id 'java'
    id 'maven-publish'
    id 'net.kyori.indra.git' version '3.1.3'
}

group 'ac.grim.grimac'
version '1.0'
description 'GrimAPI'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    withSourcesJar()
    withJavadocJar()
    disableAutoTargetJvm()
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(17)
    options.encoding = "UTF-8"
}

def envProperties = new Properties()
def envFile = file(".env")
if (envFile.exists()) {
    envFile.withReader("UTF-8") { reader ->
        envProperties.load(reader)
    }
}

def getEnvVar = { name ->
    System.getenv(name) ?: envProperties.getProperty(name)
}

publishing {
    repositories {
        mavenLocal()
        def repoUrl = getEnvVar("MAVEN_REPO_URL")
        if (repoUrl != null) {
            maven {
                name = getEnvVar("MAVEN_REPO_NAME") ?: ""
                url = uri(repoUrl)
                credentials {
                    username = getEnvVar("MAVEN_USERNAME") ?: ""
                    password = getEnvVar("MAVEN_PASSWORD") ?: ""
                }
            }
        }
    }
    publications {
        maven(MavenPublication) {
            def commitName = "any-" + indraGit.commit()?.name()?.substring(0, 10)
            version = commitName
            from(components.java)
        }
    }
}


repositories {
    mavenLocal()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' } // Bstats, Spigot
    maven { url = 'https://jitpack.io/' } // PacketEvents
    maven { url = 'https://repo.viaversion.com' } // ViaVersion
    mavenCentral()
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.1.0'

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

test {
    useJUnitPlatform()
}